{
  "info": {
    "name": "FloNeo LCNC Platform - Investor Demo",
    "description": "Complete investor demonstration workflow for FloNeo Low-Code No-Code Platform featuring Insurance & CRM templates, AI suggestions, and real-time updates.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "insuranceAppId",
      "value": "",
      "type": "string"
    },
    {
      "key": "crmAppId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üéØ INVESTOR DEMO FLOW",
      "item": [
        {
          "name": "1. üîê Developer Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.data.accessToken);",
                  "    pm.test('‚úÖ Login successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.user.role).to.equal('developer');",
                  "        pm.expect(response.data.accessToken).to.exist;",
                  "    });",
                  "    console.log('üéâ Developer authenticated successfully!');",
                  "} else {",
                  "    pm.test('‚ùå Login failed', function () {",
                  "        pm.expect.fail('Login should succeed');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@developer.com\",\n  \"password\": \"test123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Authenticate developer user for demo session"
          }
        },
        {
          "name": "2. üìã List Available Templates",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ Templates retrieved successfully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.templates).to.be.an('array');",
                  "    pm.expect(response.data.templates.length).to.equal(5);",
                  "});",
                  "",
                  "const templates = pm.response.json().data.templates;",
                  "const insuranceTemplate = templates.find(t => t.name === 'Insurance Form App');",
                  "const crmTemplate = templates.find(t => t.name === 'CRM Template');",
                  "",
                  "pm.test('‚úÖ Insurance Form App template exists', function () {",
                  "    pm.expect(insuranceTemplate).to.exist;",
                  "    pm.expect(insuranceTemplate.category).to.equal('Insurance');",
                  "});",
                  "",
                  "pm.test('‚úÖ CRM Template exists', function () {",
                  "    pm.expect(crmTemplate).to.exist;",
                  "    pm.expect(crmTemplate.category).to.equal('CRM');",
                  "});",
                  "",
                  "console.log('üìä Available Templates:');",
                  "templates.forEach(template => {",
                  "    console.log(`   - ${template.name} (${template.category})`);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/templates",
              "host": ["{{baseUrl}}"],
              "path": ["api", "templates"]
            },
            "description": "Retrieve all available templates including Insurance and CRM"
          }
        },
        {
          "name": "3. ü§ñ Get AI App Suggestions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ AI suggestions retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.ideas).to.be.an('array');",
                  "    pm.expect(response.data.ideas.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "const ideas = pm.response.json().data.ideas;",
                  "console.log('ü§ñ AI-Generated App Ideas:');",
                  "ideas.forEach((idea, index) => {",
                  "    console.log(`   ${index + 1}. ${idea.name}`);",
                  "    console.log(`      Template: ${idea.suggestedTemplate}`);",
                  "    console.log(`      Business Value: ${idea.businessValue}`);",
                  "    console.log(`      Development Time: ${idea.estimatedDevelopmentTime}`);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/floneo-ai/ideas",
              "host": ["{{baseUrl}}"],
              "path": ["api", "floneo-ai", "ideas"]
            },
            "description": "Get AI-generated app suggestions with template recommendations"
          }
        },
        {
          "name": "4. üè• Create Insurance App from Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('insuranceAppId', response.data.app.id);",
                  "    pm.test('‚úÖ Insurance app created successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.app.name).to.equal('Demo Insurance Portal');",
                  "        pm.expect(response.data.app.templateId).to.equal(4);",
                  "        pm.expect(response.data.app.template.name).to.equal('Insurance Form App');",
                  "        pm.expect(response.data.app.status).to.equal('Draft');",
                  "    });",
                  "    console.log('üè• Insurance app created with template!');",
                  "    console.log(`   App ID: ${response.data.app.id}`);",
                  "    console.log(`   Template: ${response.data.app.template.name}`);",
                  "} else {",
                  "    pm.test('‚ùå Insurance app creation failed', function () {",
                  "        pm.expect.fail('Insurance app creation should succeed');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Demo Insurance Portal\",\n  \"description\": \"Insurance policy inquiry portal for investor demo\",\n  \"templateId\": 4\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/apps",
              "host": ["{{baseUrl}}"],
              "path": ["api", "apps"]
            },
            "description": "Create insurance app from Insurance Form App template"
          }
        },
        {
          "name": "5. üë• Create CRM App from Template",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('crmAppId', response.data.app.id);",
                  "    pm.test('‚úÖ CRM app created successfully', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.app.name).to.equal('Demo CRM System');",
                  "        pm.expect(response.data.app.templateId).to.equal(5);",
                  "        pm.expect(response.data.app.template.name).to.equal('CRM Template');",
                  "        pm.expect(response.data.app.status).to.equal('Draft');",
                  "    });",
                  "    console.log('üë• CRM app created with template!');",
                  "    console.log(`   App ID: ${response.data.app.id}`);",
                  "    console.log(`   Template: ${response.data.app.template.name}`);",
                  "} else {",
                  "    pm.test('‚ùå CRM app creation failed', function () {",
                  "        pm.expect.fail('CRM app creation should succeed');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Demo CRM System\",\n  \"description\": \"Customer relationship management system for investor demo\",\n  \"templateId\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/apps",
              "host": ["{{baseUrl}}"],
              "path": ["api", "apps"]
            },
            "description": "Create CRM app from CRM Template"
          }
        },
        {
          "name": "6. üì± View Your Apps Dashboard",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ Apps dashboard loaded', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.apps).to.be.an('array');",
                  "});",
                  "",
                  "const apps = pm.response.json().data.apps;",
                  "const insuranceApp = apps.find(app => app.name === 'Demo Insurance Portal');",
                  "const crmApp = apps.find(app => app.name === 'Demo CRM System');",
                  "",
                  "pm.test('‚úÖ Insurance app appears in dashboard', function () {",
                  "    pm.expect(insuranceApp).to.exist;",
                  "    pm.expect(insuranceApp.template.name).to.equal('Insurance Form App');",
                  "});",
                  "",
                  "pm.test('‚úÖ CRM app appears in dashboard', function () {",
                  "    pm.expect(crmApp).to.exist;",
                  "    pm.expect(crmApp.template.name).to.equal('CRM Template');",
                  "});",
                  "",
                  "console.log('üì± Your Apps Dashboard:');",
                  "apps.slice(0, 5).forEach(app => {",
                  "    console.log(`   - ${app.name} (${app.status})`);",
                  "    if (app.template) {",
                  "        console.log(`     Template: ${app.template.name} (${app.template.category})`);",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/apps",
              "host": ["{{baseUrl}}"],
              "path": ["api", "apps"]
            },
            "description": "View all apps in developer dashboard with template details"
          }
        },
        {
          "name": "7. üìä Insurance App Status Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ Insurance app status retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.app).to.exist;",
                  "    pm.expect(response.data.app.template).to.exist;",
                  "    pm.expect(response.data.metrics).to.exist;",
                  "});",
                  "",
                  "const data = pm.response.json().data;",
                  "console.log('üè• Insurance App Production Status:');",
                  "console.log(`   Status: ${data.app.status}`);",
                  "console.log(`   Template: ${data.app.template.name}`);",
                  "console.log(`   Users: ${data.metrics.users.total} (${data.metrics.users.active} active)`);",
                  "console.log(`   Performance: ${data.metrics.performance.responseTime}ms avg`);",
                  "console.log(`   Issues: ${data.metrics.issues} open issues`);"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/apps/{{insuranceAppId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "apps", "{{insuranceAppId}}", "status"]
            },
            "description": "Get production status report for Insurance app"
          }
        },
        {
          "name": "8. üìä CRM App Status Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ CRM app status retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.app).to.exist;",
                  "    pm.expect(response.data.app.template).to.exist;",
                  "    pm.expect(response.data.metrics).to.exist;",
                  "});",
                  "",
                  "const data = pm.response.json().data;",
                  "console.log('üë• CRM App Production Status:');",
                  "console.log(`   Status: ${data.app.status}`);",
                  "console.log(`   Template: ${data.app.template.name}`);",
                  "console.log(`   Users: ${data.metrics.users.total} (${data.metrics.users.active} active)`);",
                  "console.log(`   Performance: ${data.metrics.performance.responseTime}ms avg`);",
                  "console.log(`   Issues: ${data.metrics.issues} open issues`);"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/apps/{{crmAppId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["api", "apps", "{{crmAppId}}", "status"]
            },
            "description": "Get production status report for CRM app"
          }
        },
        {
          "name": "9. ü§ñ AI Ideas for Insurance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ Insurance AI ideas retrieved', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.ideas).to.be.an('array');",
                  "});",
                  "",
                  "const ideas = pm.response.json().data.ideas;",
                  "console.log('üè• AI Ideas for Insurance Industry:');",
                  "ideas.forEach((idea, index) => {",
                  "    console.log(`   ${index + 1}. ${idea.name}`);",
                  "    console.log(`      AI Features: ${idea.aiFeatures.join(', ')}`);",
                  "    console.log(`      Business Value: ${idea.businessValue}`);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/floneo-ai/ideas?category=Insurance",
              "host": ["{{baseUrl}}"],
              "path": ["api", "floneo-ai", "ideas"],
              "query": [
                {
                  "key": "category",
                  "value": "Insurance"
                }
              ]
            },
            "description": "Get AI suggestions specifically for Insurance industry"
          }
        },
        {
          "name": "10. üîì Developer Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('‚úÖ Logout successful', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    pm.expect(response.success).to.be.true;",
                  "});",
                  "",
                  "// Clear the access token",
                  "pm.collectionVariables.set('accessToken', '');",
                  "console.log('üîì Developer logged out successfully!');"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout developer and blacklist token"
          }
        }
      ],
      "description": "Complete investor demonstration workflow showcasing Insurance & CRM templates, AI suggestions, and real-time dashboard updates"
    }
  ]
}
