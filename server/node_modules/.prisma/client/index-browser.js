
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  role: 'role',
  updatedAt: 'updatedAt',
  verified: 'verified'
};

exports.Prisma.AppScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  archived: 'archived',
  ownerId: 'ownerId',
  templateId: 'templateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  preview_image: 'preview_image',
  app_schema: 'app_schema',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComponentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  appId: 'appId',
  properties: 'properties'
};

exports.Prisma.WorkflowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  appId: 'appId',
  steps: 'steps'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp',
  type: 'type',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.AppSchemaScalarFieldEnum = {
  id: 'id',
  appId: 'appId',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.AppFieldScalarFieldEnum = {
  id: 'id',
  schemaId: 'schemaId',
  name: 'name',
  type: 'type',
  constraints: 'constraints',
  relatedSchemaId: 'relatedSchemaId',
  createdAt: 'createdAt'
};

exports.Prisma.AppDataScalarFieldEnum = {
  id: 'id',
  schemaId: 'schemaId',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.VideoScalarFieldEnum = {
  id: 'id',
  title: 'title',
  url: 'url',
  category: 'category',
  createdAt: 'createdAt'
};

exports.Prisma.AppMetricScalarFieldEnum = {
  id: 'id',
  appId: 'appId',
  activeDays: 'activeDays',
  downtime: 'downtime',
  totalUsers: 'totalUsers',
  traffic: 'traffic',
  createdAt: 'createdAt'
};

exports.Prisma.AppIssueScalarFieldEnum = {
  id: 'id',
  appId: 'appId',
  severity: 'severity',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.AppWarningScalarFieldEnum = {
  id: 'id',
  appId: 'appId',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  message: 'message',
  read: 'read',
  createdAt: 'createdAt'
};

exports.Prisma.BlacklistedTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.CanvasScalarFieldEnum = {
  id: 'id',
  appId: 'appId',
  name: 'name',
  description: 'description',
  width: 'width',
  height: 'height',
  background: 'background',
  gridEnabled: 'gridEnabled',
  snapEnabled: 'snapEnabled',
  zoomLevel: 'zoomLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CanvasElementScalarFieldEnum = {
  id: 'id',
  canvasId: 'canvasId',
  elementId: 'elementId',
  type: 'type',
  name: 'name',
  x: 'x',
  y: 'y',
  width: 'width',
  height: 'height',
  rotation: 'rotation',
  zIndex: 'zIndex',
  locked: 'locked',
  visible: 'visible',
  groupId: 'groupId',
  parentId: 'parentId',
  properties: 'properties',
  styles: 'styles',
  constraints: 'constraints',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ElementInteractionScalarFieldEnum = {
  id: 'id',
  elementId: 'elementId',
  event: 'event',
  action: 'action',
  createdAt: 'createdAt'
};

exports.Prisma.ElementValidationScalarFieldEnum = {
  id: 'id',
  elementId: 'elementId',
  rule: 'rule',
  value: 'value',
  message: 'message',
  createdAt: 'createdAt'
};

exports.Prisma.CanvasHistoryScalarFieldEnum = {
  id: 'id',
  canvasId: 'canvasId',
  action: 'action',
  elementId: 'elementId',
  oldState: 'oldState',
  newState: 'newState',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.MediaFileScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  url: 'url',
  thumbnail: 'thumbnail',
  userId: 'userId',
  appId: 'appId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AppStatus = exports.$Enums.AppStatus = {
  Draft: 'Draft',
  Published: 'Published',
  Active: 'Active'
};

exports.FieldType = exports.$Enums.FieldType = {
  text: 'text',
  number: 'number',
  date: 'date'
};

exports.IssueSeverity = exports.$Enums.IssueSeverity = {
  severe: 'severe',
  mild: 'mild',
  low: 'low'
};

exports.IssueStatus = exports.$Enums.IssueStatus = {
  open: 'open',
  resolved: 'resolved'
};

exports.ElementType = exports.$Enums.ElementType = {
  TEXT_FIELD: 'TEXT_FIELD',
  TEXT_AREA: 'TEXT_AREA',
  DROPDOWN: 'DROPDOWN',
  CHECKBOX: 'CHECKBOX',
  RADIO_BUTTON: 'RADIO_BUTTON',
  PHONE_FIELD: 'PHONE_FIELD',
  TOGGLE: 'TOGGLE',
  DATE_PICKER: 'DATE_PICKER',
  IMAGE: 'IMAGE',
  BUTTON: 'BUTTON',
  UPLOAD_MEDIA: 'UPLOAD_MEDIA',
  ADD_MEDIA: 'ADD_MEDIA',
  SHAPE: 'SHAPE',
  ICON_MINIMIZE: 'ICON_MINIMIZE',
  ICON_MAXIMIZE: 'ICON_MAXIMIZE',
  ICON_CLOSE: 'ICON_CLOSE',
  ICON_SETTINGS: 'ICON_SETTINGS',
  ICON_REFRESH: 'ICON_REFRESH',
  ICON_INFO: 'ICON_INFO',
  ICON_HELP: 'ICON_HELP',
  ICON_SEARCH: 'ICON_SEARCH'
};

exports.Prisma.ModelName = {
  User: 'User',
  App: 'App',
  Template: 'Template',
  Component: 'Component',
  Workflow: 'Workflow',
  Otp: 'Otp',
  AppSchema: 'AppSchema',
  AppField: 'AppField',
  AppData: 'AppData',
  Video: 'Video',
  AppMetric: 'AppMetric',
  AppIssue: 'AppIssue',
  AppWarning: 'AppWarning',
  Notification: 'Notification',
  BlacklistedToken: 'BlacklistedToken',
  Canvas: 'Canvas',
  CanvasElement: 'CanvasElement',
  ElementInteraction: 'ElementInteraction',
  ElementValidation: 'ElementValidation',
  CanvasHistory: 'CanvasHistory',
  MediaFile: 'MediaFile'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
